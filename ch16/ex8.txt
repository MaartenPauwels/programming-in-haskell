data Tree a = Leaf a | Node (Tree a) (Tree a)

instance Functor Tree where
    -- fmap :: (a -> b) -> Tree a -> Tree b
    fmap g (Leaf x)   = Leaf (g x)
    fmap g (Node l r) = Node (fmap g l) (fmap g r)

fmap id = id
Base case:    
fmap id (Leaf x)
= {applying fmap}
Leaf (id x)
= {applying id}
Leaf x
= {unapplying id}
id (Leaf x)

Inductive case:    
fmap id (Node l r)
= {applying fmap}
Node (fmap id l) (fmap id r)
= {induction hypothesis}
Node l r
= {unapplying id}
id (Node l r)


fmap (g . h) = fmap g . fmap h
Base case:
fmap (g . h) (Leaf x)
= {applying fmap}
Leaf (g . h) x
= {applying .}
Leaf (g (h x))
= {unapplying fmap}
fmap g (Leaf (h x))
= {unapplying fmap}
fmap g (fmap h (Leaf x))
= {unapplying .}
(fmap g . fmap h) (Leaf x)

Inductive case:    
fmap (g . h) (Node l r)
= {applying fmap}
Node (fmap (g . h) l) (fmap (g . h) r)
= {induction hypothesis}
Node ((fmap g . fmap h) l) ((fmap g . fmap h) r)
= {applying .}
Node (fmap g (fmap h l)) (fmap g (fmap h r))
= {unapplying fmap}
fmap g (Node (fmap h l) (fmap h r))
= {unapplying fmap}
fmap g (fmap h (Node l r))
= {unapplying .}
(fmap g . fmap h) (Node l r)
