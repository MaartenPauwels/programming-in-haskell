comp' e c = comp e ++ c

comp (Val n) = [PUSH n]
comp (Add x y) = comp x ++ comp y ++ [ADD]

Base case:
comp' (Val n) c 
= {specification of comp'}
comp (Val n) ++ c 
= {applying comp}
[PUSH n] ++ c
= {applying ++}
PUSH n : c

Inductive case:
comp' (Add x y) c
= {specification of comp'}
comp (Add x y) ++ c
= {applying ++}
(comp x ++ comp y ++ [ADD]) ++ c
= {associativity of ++}
comp x ++ (comp y ++ ([ADD] ++ c))
= {applying ++}
comp x ++ (comp y ++ (ADD : c))
= {induction hypothesis for inner parenthesis}
comp x ++ (comp' y (ADD : c))
= {induction hypothesis}
comp' x (comp' y (ADD : c))
